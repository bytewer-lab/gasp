/*
Copyright Â© 2025 Lucas Soares <lucas@bytewer.com>
*/
package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
)

// initCmd represents the init command
var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Install the git hooks",
	Long:  `This command will move the git hooks from the hooks directory to the .git/hooks directory.`,
	Run: func(cmd *cobra.Command, args []string) {
		dir, err := FindGitRoot()
		if err != nil {
			fmt.Printf("Error not in a git repository: %s\n", err)
			os.Exit(1)
		}

		hooksDir := filepath.Join(dir, "hooks")
		if _, err := os.Stat(hooksDir); os.IsNotExist(err) {
			if err := os.MkdirAll(hooksDir, 0755); err != nil {
				fmt.Printf("Error creating hooks directory: %s\n", err)
				os.Exit(1)
			}
			preCommitPath := filepath.Join(hooksDir, "pre-commit")
			preCommitContent := `#!/bin/bash

set -e
set -x

STAGED_FILES=$(git diff --cached --name-only)

./scripts/lint.sh

if [ -n "$STAGED_FILES" ]; then
    for file in $STAGED_FILES; do
        if [ -e "$file" ]; then
            git add "$file"
        fi
    done
fi
`
			if err := os.WriteFile(preCommitPath, []byte(preCommitContent), 0755); err != nil {
				fmt.Printf("Error creating pre-commit hook: %s\n", err)
				os.Exit(1)
			}
		}

		scriptsDir := filepath.Join(dir, "scripts")
		if _, err := os.Stat(scriptsDir); os.IsNotExist(err) {
			if err := os.MkdirAll(scriptsDir, 0755); err != nil {
				fmt.Printf("Error creating scripts directory: %s\n", err)
				os.Exit(1)
			}
			lintPath := filepath.Join(scriptsDir, "lint.sh")
			lintContent := `#!/bin/bash

set -e
set -x

# Add your linting commands here
`
			if err := os.WriteFile(lintPath, []byte(lintContent), 0755); err != nil {
				fmt.Printf("Error creating lint.sh script: %s\n", err)
				os.Exit(1)
			}
		}

		gitHooksDir := filepath.Join(dir, ".git", "hooks")
		err = CleanTargetDirectory(gitHooksDir)
		if err != nil {
			fmt.Printf("Error while cleaning target hooks directory: %s\n", err)
			os.Exit(1)
		}

		hooks := []string{
			"applypatch-msg",
			"pre-applypatch",
			"post-applypatch",
			"pre-commit",
			"prepare-commit-msg",
			"commit-msg",
			"post-commit",
			"pre-rebase",
			"post-checkout",
			"post-merge",
			"pre-push",
			"post-rewrite",
			"sendemail-validate",
			"pre-auto-gc",
			"post-index-change",
			"fsmonitor-watchman",
			"fsmonitor-watchmanv2",
			"p4-pre-submit",
			"p4-prepare-changelist",
			"p4-changelist",
			"p4-post-changelist",
		}

		for _, hookName := range hooks {
			targetPath := filepath.Join(gitHooksDir, hookName)
			hookFile, err := os.Create(targetPath)
			if err != nil {
				fmt.Printf("Error creating file %s: %s\n", hookName, err)
				continue
			}
			scriptTemplate := `#!/bin/sh

# Generated by gasp
gasp run %s
`
			scriptContent := fmt.Sprintf(scriptTemplate, hookName)
			_, err = hookFile.WriteString(scriptContent)
			if err != nil {
				fmt.Printf("Error writing to file %s: %s\n", hookName, err)
				continue
			}
			if err = hookFile.Close(); err != nil {
				fmt.Printf("Error closing file %s: %s\n", hookName, err)
				continue
			}
			if err != nil {
				fmt.Printf("Error writing to file %s: %s\n", hookName, err)
				continue
			}
			err = os.Chmod(targetPath, 0755)
			if err != nil {
				fmt.Printf("Error making file executable %s: %s\n", hookName, err)
				continue
			}
			fmt.Printf("Created hook: %s\n", hookName)
		}
		fmt.Println("Git hooks initialized successfully")
	},
}

func init() {
	rootCmd.AddCommand(initCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// initCmd.PersistentFlags().String("foo", "", "A help for foo")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// initCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}
